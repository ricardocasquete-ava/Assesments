namespace App.Singleton;

public class Server
{
    public static Server Instance { get; } = new Server();

    private int _lastUserId;

    private readonly Dictionary<int, bool> _userIds;
    public IEnumerable<int> ConnectedUsers => _userIds
        .Where(k => k.Value == true)
        .Select(k => k.Key);

    public string Id { get; }

    /// <summary>
    ///     A new instance can't be generated by consumers.
    ///     There's only one Server instance available at any point in time,
    ///         and this is responsible for managing the state across all consumers.
    /// </summary>
    private Server()
    {
        var current = DateTime.UtcNow.Ticks;
        var value = current - new DateTime(2019,1,4).Ticks;
        Id = value.ToString("x");

        _lastUserId = 0;
        _userIds = new Dictionary<int, bool>();
    }

    public int Register()
    {
        var newUserId = _lastUserId + 1;

        if (_userIds.ContainsKey(newUserId))
        {
            throw new InvalidOperationException("Unable to register, user already exists.");
        }

        _userIds.Add(newUserId, false);
        _lastUserId = newUserId;
        return newUserId;
    }

    public void Login(int userId)
    {
        if (_userIds.ContainsKey(userId) == false)
        {
            throw new InvalidOperationException("Unable to login, user does not exists.");
        }

        _userIds[userId] = true;
    }

    public void LogOff(int userId)
    {
        if (_userIds.ContainsKey(userId) == false)
        {
            throw new InvalidOperationException("Unable to logoff, user does not exists.");
        }

        _userIds[userId] = false;
    }
}