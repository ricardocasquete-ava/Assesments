/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Mapper;
using Beef.Mapper.Converters;
using CFS.Assesment.Online.Business.Entities;
using RefDataNamespace = CFS.Assesment.Online.Business.Entities;

namespace CFS.Assesment.Online.Business.Data
{
    /// <summary>
    /// Provides the <see cref="RoverController"/> data access.
    /// </summary>
    public partial class RoverControllerData : IRoverControllerData
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RoverControllerData"/> class.
        /// </summary>
        public RoverControllerData()
            { RoverControllerDataCtor(); }

        partial void RoverControllerDataCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Updates an existing <see cref="RoverController"/>.
        /// </summary>
        /// <param name="value">The <see cref="RoverController"/>.</param>
        /// <param name="operation">The Operation.</param>
        /// <returns>The updated <see cref="RoverController"/>.</returns>
        public Task<RoverController> MoveOneAsync(RoverController value, RefDataNamespace.RoverOperation operation) => DataInvoker.Current.InvokeAsync(this, () => MoveOneOnImplementationAsync(Check.NotNull(value, nameof(value)), operation));

        /// <summary>
        /// Updates an existing <see cref="RoverController"/>.
        /// </summary>
        /// <param name="value">The <see cref="RoverController"/>.</param>
        /// <param name="operations">The Operations.</param>
        /// <returns>The updated <see cref="RoverController"/>.</returns>
        public Task<RoverController> MoveManyAsync(RoverController value, string operations) => DataInvoker.Current.InvokeAsync(this, () => MoveManyOnImplementationAsync(Check.NotNull(value, nameof(value)), operations));
    }
}

#pragma warning restore
#nullable restore