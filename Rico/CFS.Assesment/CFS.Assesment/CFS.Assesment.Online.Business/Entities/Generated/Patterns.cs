/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Beef.RefData;
using Newtonsoft.Json;
using RefDataNamespace = CFS.Assesment.Online.Business.Entities;

namespace CFS.Assesment.Online.Business.Entities
{
    /// <summary>
    /// Represents the Entry Point for the Patterns: Singleton, Factory and Abstract Factory entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class Patterns : EntityBase, IStringIdentifier, IUniqueKey, IEquatable<Patterns>
    {
        #region Privates

        private string? _id;
        private string _response;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the Valid Values are [Teen, Retiree, Expat] - Any other value revents to default implementation.
        /// </summary>
        [JsonProperty("id", DefaultValueHandling = DefaultValueHandling.Include)]
        [Display(Name="Identifier")]
        public string? Id
        {
            get => _id;
            set => SetValue(ref _id, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Id));
        }

        /// <summary>
        /// Gets or sets the Company Response.
        /// </summary>
        [JsonProperty("response", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Response")]
        public string Response
        {
            get => _response;
            set => SetValue(ref _response, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Response));
        }

        #endregion

        #region IUniqueKey
        
        /// <summary>
        /// Gets the list of property names that represent the unique key.
        /// </summary>
        public string[] UniqueKeyProperties => new string[] { nameof(Id) };

        /// <summary>
        /// Creates the <see cref="UniqueKey"/>.
        /// </summary>
        /// <returns>The <see cref="Beef.Entities.UniqueKey"/>.</returns>
        /// <param name="id">The <see cref="Id"/>.</param>
        public static UniqueKey CreateUniqueKey(string? id) => new UniqueKey(id);

        /// <summary>
        /// Gets the <see cref="UniqueKey"/> (consists of the following property(s): <see cref="Id"/>).
        /// </summary>
        public UniqueKey UniqueKey => CreateUniqueKey(Id);

        #endregion

        #region IEquatable

        /// <summary>
        /// Determines whether the specified object is equal to the current object by comparing the values of all the properties.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object? obj) => obj is Patterns val && Equals(val);

        /// <summary>
        /// Determines whether the specified <see cref="Patterns"/> is equal to the current <see cref="Patterns"/> by comparing the values of all the properties.
        /// </summary>
        /// <param name="value">The <see cref="Patterns"/> to compare with the current <see cref="Patterns"/>.</param>
        /// <returns><c>true</c> if the specified <see cref="Patterns"/> is equal to the current <see cref="Patterns"/>; otherwise, <c>false</c>.</returns>
        public bool Equals(Patterns? value)
        {
            if (value == null)
                return false;
            else if (ReferenceEquals(value, this))
                return true;

            return base.Equals((object)value)
                && Equals(Id, value.Id)
                && Equals(Response, value.Response);
        }

        /// <summary>
        /// Compares two <see cref="Patterns"/> types for equality.
        /// </summary>
        /// <param name="a"><see cref="Patterns"/> A.</param>
        /// <param name="b"><see cref="Patterns"/> B.</param>
        /// <returns><c>true</c> indicates equal; otherwise, <c>false</c> for not equal.</returns>
        public static bool operator == (Patterns? a, Patterns? b) => Equals(a, b);

        /// <summary>
        /// Compares two <see cref="Patterns"/> types for non-equality.
        /// </summary>
        /// <param name="a"><see cref="Patterns"/> A.</param>
        /// <param name="b"><see cref="Patterns"/> B.</param>
        /// <returns><c>true</c> indicates not equal; otherwise, <c>false</c> for equal.</returns>
        public static bool operator != (Patterns? a, Patterns? b) => !Equals(a, b);

        /// <summary>
        /// Returns the hash code for the <see cref="Patterns"/>.
        /// </summary>
        /// <returns>The hash code for the <see cref="Patterns"/>.</returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(Id);
            hash.Add(Response);
            return base.GetHashCode() ^ hash.ToHashCode();
        }
    
        #endregion

        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another <see cref="Patterns"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="Patterns"/> to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<Patterns>(from);
            CopyFrom(fval);
        }
        
        /// <summary>
        /// Performs a copy from another <see cref="Patterns"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="Patterns"/> to copy from.</param>
        public void CopyFrom(Patterns from)
        {
            if (from == null)
                throw new ArgumentNullException(nameof(from));

            CopyFrom((EntityBase)from);
            Id = from.Id;
            Response = from.Response;

            OnAfterCopyFrom(from);
        }

        #endregion

        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the <see cref="Patterns"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="Patterns"/>.</returns>
        public override object Clone()
        {
            var clone = new Patterns();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the <see cref="Patterns"/> resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
            Id = Cleaner.Clean(Id, StringTrim.UseDefault, StringTransform.UseDefault);
            Response = Cleaner.Clean(Response, StringTrim.UseDefault, StringTransform.UseDefault);

            OnAfterCleanUp();
        }

        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
                return Cleaner.IsInitial(Id)
                    && Cleaner.IsInitial(Response);
            }
        }

        #endregion

        #region PartialMethods
      
        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom(Patterns from);

        #endregion
    }
}

#pragma warning restore
#nullable restore