/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using Beef.Entities;
using Beef.RefData;
using Newtonsoft.Json;
using RefDataNamespace = CFS.Assesment.Online.Business.Entities;

namespace CFS.Assesment.Online.Business.Entities
{
    /// <summary>
    /// Represents the Position of the Rovers within a Plateau entity.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class RoverPosition : EntityBase, IEquatable<RoverPosition>
    {
        #region Privates

        private int _xCoordinate;
        private int _yCoordinate;
        private string _orientationSid;
        private string? _orientationText;

        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the X Coordinate.
        /// </summary>
        [JsonProperty("xCoordinate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="X Coordinate")]
        public int XCoordinate
        {
            get => _xCoordinate;
            set => SetValue(ref _xCoordinate, value, false, false, nameof(XCoordinate));
        }

        /// <summary>
        /// Gets or sets the Latitude from the vertial axis.
        /// </summary>
        [JsonProperty("yCoordinate", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Y Coordinate")]
        public int YCoordinate
        {
            get => _yCoordinate;
            set => SetValue(ref _yCoordinate, value, false, false, nameof(YCoordinate));
        }

        /// <summary>
        /// Gets or sets the <see cref="Orientation"/> using the underlying Serialization Identifier (SID).
        /// </summary>
        [JsonProperty("orientation", DefaultValueHandling = DefaultValueHandling.Ignore)]
        [Display(Name="Orientation")]
        public string OrientationSid
        {
            get => _orientationSid;
            set => SetValue(ref _orientationSid, value, false, StringTrim.UseDefault, StringTransform.UseDefault, nameof(Orientation));
        }

        /// <summary>
        /// Gets the corresponding <see cref="Orientation"/> text (read-only where selected).
        /// </summary>
        [JsonProperty("orientationText", DefaultValueHandling = DefaultValueHandling.Ignore)]
        public string? OrientationText { get => _orientationText ?? GetRefDataText(() => Orientation); set => _orientationText = value; }

        /// <summary>
        /// Gets or sets the Orientation (see <see cref="RefDataNamespace.CardinalPosition"/>).
        /// </summary>
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [Display(Name="Orientation")]
        public RefDataNamespace.CardinalPosition Orientation
        {
            get => _orientationSid;
            set => SetValue(ref _orientationSid, value, false, false, nameof(Orientation)); 
        }

        #endregion

        #region IEquatable

        /// <summary>
        /// Determines whether the specified object is equal to the current object by comparing the values of all the properties.
        /// </summary>
        /// <param name="obj">The object to compare with the current object.</param>
        /// <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
        public override bool Equals(object? obj) => obj is RoverPosition val && Equals(val);

        /// <summary>
        /// Determines whether the specified <see cref="RoverPosition"/> is equal to the current <see cref="RoverPosition"/> by comparing the values of all the properties.
        /// </summary>
        /// <param name="value">The <see cref="RoverPosition"/> to compare with the current <see cref="RoverPosition"/>.</param>
        /// <returns><c>true</c> if the specified <see cref="RoverPosition"/> is equal to the current <see cref="RoverPosition"/>; otherwise, <c>false</c>.</returns>
        public bool Equals(RoverPosition? value)
        {
            if (value == null)
                return false;
            else if (ReferenceEquals(value, this))
                return true;

            return base.Equals((object)value)
                && Equals(XCoordinate, value.XCoordinate)
                && Equals(YCoordinate, value.YCoordinate)
                && Equals(OrientationSid, value.OrientationSid);
        }

        /// <summary>
        /// Compares two <see cref="RoverPosition"/> types for equality.
        /// </summary>
        /// <param name="a"><see cref="RoverPosition"/> A.</param>
        /// <param name="b"><see cref="RoverPosition"/> B.</param>
        /// <returns><c>true</c> indicates equal; otherwise, <c>false</c> for not equal.</returns>
        public static bool operator == (RoverPosition? a, RoverPosition? b) => Equals(a, b);

        /// <summary>
        /// Compares two <see cref="RoverPosition"/> types for non-equality.
        /// </summary>
        /// <param name="a"><see cref="RoverPosition"/> A.</param>
        /// <param name="b"><see cref="RoverPosition"/> B.</param>
        /// <returns><c>true</c> indicates not equal; otherwise, <c>false</c> for equal.</returns>
        public static bool operator != (RoverPosition? a, RoverPosition? b) => !Equals(a, b);

        /// <summary>
        /// Returns the hash code for the <see cref="RoverPosition"/>.
        /// </summary>
        /// <returns>The hash code for the <see cref="RoverPosition"/>.</returns>
        public override int GetHashCode()
        {
            var hash = new HashCode();
            hash.Add(XCoordinate);
            hash.Add(YCoordinate);
            hash.Add(OrientationSid);
            return base.GetHashCode() ^ hash.ToHashCode();
        }
    
        #endregion

        #region ICopyFrom
    
        /// <summary>
        /// Performs a copy from another <see cref="RoverPosition"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="RoverPosition"/> to copy from.</param>
        public override void CopyFrom(object from)
        {
            var fval = ValidateCopyFromType<RoverPosition>(from);
            CopyFrom(fval);
        }
        
        /// <summary>
        /// Performs a copy from another <see cref="RoverPosition"/> updating this instance.
        /// </summary>
        /// <param name="from">The <see cref="RoverPosition"/> to copy from.</param>
        public void CopyFrom(RoverPosition from)
        {
            if (from == null)
                throw new ArgumentNullException(nameof(from));

            CopyFrom((EntityBase)from);
            XCoordinate = from.XCoordinate;
            YCoordinate = from.YCoordinate;
            OrientationSid = from.OrientationSid;

            OnAfterCopyFrom(from);
        }

        #endregion

        #region ICloneable
        
        /// <summary>
        /// Creates a deep copy of the <see cref="RoverPosition"/>.
        /// </summary>
        /// <returns>A deep copy of the <see cref="RoverPosition"/>.</returns>
        public override object Clone()
        {
            var clone = new RoverPosition();
            clone.CopyFrom(this);
            return clone;
        }
        
        #endregion
        
        #region ICleanUp

        /// <summary>
        /// Performs a clean-up of the <see cref="RoverPosition"/> resetting property values as appropriate to ensure a basic level of data consistency.
        /// </summary>
        public override void CleanUp()
        {
            base.CleanUp();
            XCoordinate = Cleaner.Clean(XCoordinate);
            YCoordinate = Cleaner.Clean(YCoordinate);
            OrientationSid = Cleaner.Clean(OrientationSid);

            OnAfterCleanUp();
        }

        /// <summary>
        /// Indicates whether considered initial; i.e. all properties have their initial value.
        /// </summary>
        /// <returns><c>true</c> indicates is initial; otherwise, <c>false</c>.</returns>
        public override bool IsInitial
        {
            get
            {
                return Cleaner.IsInitial(XCoordinate)
                    && Cleaner.IsInitial(YCoordinate)
                    && Cleaner.IsInitial(OrientationSid);
            }
        }

        #endregion

        #region PartialMethods
      
        partial void OnAfterCleanUp();

        partial void OnAfterCopyFrom(RoverPosition from);

        #endregion
    }
}

#pragma warning restore
#nullable restore