/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using CFS.Assesment.Online.Business.Entities;
using CFS.Assesment.Online.Business.DataSvc;
using CFS.Assesment.Online.Business.Validation;
using RefDataNamespace = CFS.Assesment.Online.Business.Entities;

namespace CFS.Assesment.Online.Business
{
    /// <summary>
    /// Provides the <see cref="RoverController"/> business functionality.
    /// </summary>
    public partial class RoverControllerManager : IRoverControllerManager
    {
        private readonly IRoverControllerDataSvc _dataService;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoverControllerManager"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="IRoverControllerDataSvc"/>.</param>
        public RoverControllerManager(IRoverControllerDataSvc dataService)
            { _dataService = Check.NotNull(dataService, nameof(dataService)); RoverControllerManagerCtor(); }

        partial void RoverControllerManagerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Updates an existing <see cref="RoverController"/>.
        /// </summary>
        /// <param name="value">The <see cref="RoverController"/>.</param>
        /// <param name="operation">The Operation.</param>
        /// <returns>The updated <see cref="RoverController"/>.</returns>
        public async Task<RoverController> MoveOneAsync(RoverController value, RefDataNamespace.RoverOperation operation) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            await value.Validate().Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);

            Cleaner.CleanUp(value, operation);
            await value.Validate().Entity().With<IValidator<RoverController>>().RunAsync(throwOnError: true).ConfigureAwait(false);
            return Cleaner.Clean(await _dataService.MoveOneAsync(value, operation).ConfigureAwait(false));
        }, BusinessInvokerArgs.Update).ConfigureAwait(false);

        /// <summary>
        /// Updates an existing <see cref="RoverController"/>.
        /// </summary>
        /// <param name="value">The <see cref="RoverController"/>.</param>
        /// <param name="operations">The Operations.</param>
        /// <returns>The updated <see cref="RoverController"/>.</returns>
        public async Task<RoverController> MoveManyAsync(RoverController value, string operations) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            await value.Validate().Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);

            Cleaner.CleanUp(value, operations);
            await value.Validate().Entity().With<IValidator<RoverController>>().RunAsync(throwOnError: true).ConfigureAwait(false);
            return Cleaner.Clean(await _dataService.MoveManyAsync(value, operations).ConfigureAwait(false));
        }, BusinessInvokerArgs.Update).ConfigureAwait(false);
    }
}

#pragma warning restore
#nullable restore