/*
 * This file is automatically generated; any changes will be lost. 
 */

#nullable enable
#pragma warning disable

using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Beef;
using Beef.Business;
using Beef.Entities;
using Beef.Validation;
using CFS.Assesment.Online.Business.Entities;
using CFS.Assesment.Online.Business.DataSvc;
using RefDataNamespace = CFS.Assesment.Online.Business.Entities;

namespace CFS.Assesment.Online.Business
{
    /// <summary>
    /// Provides the <see cref="Patterns"/> business functionality.
    /// </summary>
    public partial class PatternsManager : IPatternsManager
    {
        private readonly IPatternsDataSvc _dataService;

        /// <summary>
        /// Initializes a new instance of the <see cref="PatternsManager"/> class.
        /// </summary>
        /// <param name="dataService">The <see cref="IPatternsDataSvc"/>.</param>
        public PatternsManager(IPatternsDataSvc dataService)
            { _dataService = Check.NotNull(dataService, nameof(dataService)); PatternsManagerCtor(); }

        partial void PatternsManagerCtor(); // Enables additional functionality to be added to the constructor.

        /// <summary>
        /// Gets the specified <see cref="Patterns"/>.
        /// </summary>
        /// <param name="id">The Valid Values are [Teen, Retiree, Expat] - Any other value revents to default implementation.</param>
        /// <returns>The selected <see cref="Patterns"/> where found.</returns>
        public async Task<Patterns?> GetAsync(string? id) => await ManagerInvoker.Current.InvokeAsync(this, async () =>
        {
            Cleaner.CleanUp(id);
            await id.Validate(nameof(id)).Mandatory().RunAsync(throwOnError: true).ConfigureAwait(false);
            return Cleaner.Clean(await _dataService.GetAsync(id).ConfigureAwait(false));
        }, BusinessInvokerArgs.Read).ConfigureAwait(false);
    }
}

#pragma warning restore
#nullable restore